#!/bin/bash

config_file_folder="${HOME}/.config/gitb/"
verbose_mode=false
show_help=false
command=""
subcommand=""
project=""
shopt -s nullglob
projects_list=("${config_file_folder}"*)
projects="${projects_list[*]}"
branch_for_pull="master"
pull_only_master=
branch_delete=false
target_dir="${PROJECT_ROOT_PATH}/"
repo_to_clone=""

POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
    case $1 in
        -v)
            verbose_mode=true
            shift
            ;;
        -h | --help | help)
            show_help=true
            shift
            ;;
        -r | --repository-folder)
            target_dir=${2}
            shift
            shift
            ;;
        -c | --config-file-folder)
            config_file_folder=${2}
            shift
            shift
            ;;
        -d | --delete)
            branch_delete=true
            shift
            ;;
        -b | --branch | -b=* | --branch=*)
            # TODO: remove support of "=" options
            if [[ ${1} == "-b" || ${1} == "--branch" ]]; then
                branch_for_pull="${2}"
                shift
            else
                branch_for_pull="${1#*=}"
            fi
            shift
            ;;
        -om | --only-master)
            if [[ ${2} == "1" || ${2} == "0" ]]; then
                pull_only_master=${2}
                shift
                shift
            fi
            ;;
        clone | pull | branch | project)
            command=${1}
            shift
            ;;
        *)
            if [[ ${command} == "project" && ${subcommand} == "" ]]; then
                subcommand=${1}
            else
                if [[ " ${projects} " =~ .*"$1".* ]]; then
                    project=${1}

                    # Not sure if this is the correct solution [botond.pelyi]
                    if [[ ${command} == "clone" ]]; then
                        subcommand="clone_single"
                        repo_to_clone=${2}
                        shift
                    fi
                fi
            fi

            shift
            ;;
    esac
done
set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

function debug()
{
    if [ -n "$1" ]
    then
        IN="$@"
    else
        read IN # This reads a string from stdin and stores it in a variable called IN
    fi
    [[ ${verbose_mode} == true ]] && echod "${IN}"
}

function help() {
    echo ""
    echo "Usage: gitb COMMAND [SUBCOMMAND] [project]"
    echo ""
    echo "Perform GIT commands on multiple repositories"
    echo ""
    echo "Options:"
    echo "  -v                                verbose mode"
    echo "  -r,  --repository-folder string   folder where the project repositories are (default is the PROJECT_ROOT_PATH env variable)"
    echo "  -c,  --config-file-folder string  folder where the project configuration file is (default is ~/.config/gitb/)"
    case "$command" in
        clone)
            ;;
        branch)
            echo "  -d,  --delete                     Remove local branches, except the default one"
            echo "  -om, --only-master 0|1            list only master or not master"
            ;;
        pull)
            echo "  -b,  --branch string              branch to pull (default is master)"
            ;;
    esac
    echo ""
    case "$command" in 
        project)
            echo " Subcommands"
            echo "  ls        List projects"
            echo "  edit      edit the given project file"
            ;;
        *)
            echo " Commands"
            echo "  clone     Clone repositories"
            echo "  branch    Execute commands on local branches"
            echo "  pull      Pull changes if the branch is master"
            echo "  project   Project related (create, edit, list) commands"
            echo "  help      Print this helper"
            ;;
    esac

    echo ""
    echo " Examples"
    echo "  "

    exit 0
}

function ensure_project() {
    project="${1}"

    if [[ ! -f ${project_config_file} ]]; then
        echoe "Project file is missing (${project_config_file}), pls create it"
        exit 1
    fi
}

function clone_project() {
    while IFS= read -r repository; do
        bn=$(basename $repository)
        filename=${bn%.*}

        cloneInto="${target_dir}${filename}"

        if [[ -d ${cloneInto} ]]; then
            echoi "already cloned: ${bn}"
        else
            echoi "cloning: ${bn}"
            git clone ${repository} ${cloneInto}
            echoi "cloning done: ${bn}"
        fi
    done <${project_config_file}
}

function clone_single() {
    bn=$(basename $repo_to_clone)
    filename=${bn%.*}

    cloneInto="${target_dir}${filename}"

    if [[ -d ${cloneInto} ]]; then
        echoi "already cloned: ${bn}"
    else
        echoi "cloning: ${bn}"
        git clone ${repo_to_clone} ${cloneInto}
        echoi "cloning done: ${bn}"
    fi

    while IFS= read -r repository; do
        if [[ ${repository} == $repo_to_clone ]]; then
            echoi "${bn} is already in the ${project_config_file}"
            return
        fi
    done <${project_config_file}

    echoi "Adding ${bn} to ${project_config_file}"
    echo ${repo_to_clone} >> ${project_config_file}
}

function pull() {
    brancesToPull="main master staging"
    while IFS= read -r repository; do
        bn=$(basename $repository)
        filename=${bn%.*}

        appFolder="${target_dir}${filename}"

        if [[ ! -d ${appFolder} ]]; then
            echow "${bn} | App is not cloned yet, skipped"
        elif [[ $(echo "${brancesToPull}" | grep $(git -C ${appFolder} rev-parse --abbrev-ref HEAD) | wc -l) -gt 0 ]]; then
            echoi "${bn} | Branch is master, pulling"
            git -C ${appFolder} pull | debug "$@"
        else
            echow "${bn} | Branch is not master, skipped"
        fi
    done <${project_config_file}
}

function list() {
    while IFS= read -r repository; do
        bn=$(basename $repository)
        filename=${bn%.*}

        appFolder="${target_dir}${filename}"
        if [[ ! -d ${appFolder} ]]; then
            echow "${bn} | App is not cloned yet, skipped"
        else
            branch=$(git -C ${appFolder} rev-parse --abbrev-ref HEAD)
            if [[ (${branch} == "master" && ${pull_only_master} == "1") || (${branch} != "master" && ${pull_only_master} == "0") || ! ${pull_only_master} ]]; then
                echoi "App: ${bn}[$(git -C ${appFolder} rev-parse --abbrev-ref HEAD)]"
            fi
        fi

    done <${project_config_file}
}

function branch()
{
    if [[ ${branch_delete} == false ]]; then
        list
        return
    fi

    if [[ ${branch_delete} == true ]]; then
        while IFS= read -r repository; do
            bn=$(basename $repository)
            filename=${bn%.*}

            app_folder="${target_dir}${filename}"
            cd ${app_folder}
            git_local_branch_removal
            echoi "${filename} is done"
        done <${project_config_file}
    fi
}

function project_ls()
{
    ls ${config_file_folder}
}

function project_ls_repos()
{
    cat ${config_file_folder}${project}
}

function project_edit()
{
    "${EDITOR:-vim}" ${config_file_folder}${project}
}

project_config_file="${config_file_folder}${project}"

debug "            Command > ${command}"
debug "         SubCommand > ${subcommand}"
debug "            Project > ${project}"
debug "      Repo to clone > ${repo_to_clone}"
debug "           Projects > ${projects[*]}"
debug " Config file folder > ${config_file_folder}"
debug "Project config file > ${project_config_file}"
debug "         Target DIR > ${target_dir}"
debug "    Branch for pull > ${branch_for_pull}"
debug "        Only master > ${pull_only_master}"

[[ ${show_help} == true ]] && help

case "$command" in
    clone)
        ensure_project ${project}
        if [[ ${subcommand} == "clone_single" && -n ${repo_to_clone} ]]; then
            clone_single
        else
            clone_project
        fi
        ;;
    pull)
        ensure_project ${project}
        pull
        ;;
    branch)
        ensure_project ${project}
        branch 
        ;;
    project)
        case "$subcommand" in
            ls)
                if [[ ${project} == "" ]]; then
                    project_ls
                else
                    project_ls_repos
                fi
                ;;
            edit)
                project_edit
                ;;
            *)
                help
                ;;
        esac
        ;;
    *)
        help
        ;;

    esac
